import { NextRequest, NextResponse } from "next/server"
import { AmparaOrchestrator } from "@/lib/ampara-orchestrator"
import { GuideAgent } from "@/lib/agents/guide-agent"
import { RightsSpecialistAgent } from "@/lib/agents/rights-specialist"
import { ChatGoogleGenerativeAI } from "@langchain/google-genai"

export const maxDuration = 60

export async function POST(req: NextRequest) {
  try {
  const { message, lastAssistant } = await req.json()

    if (!message || typeof message !== "string") {
      return NextResponse.json({ error: "Message is required" }, { status: 400 })
    }

    if (!process.env.NEXT_PUBLIC_GOOGLE_API_KEY) {
      return NextResponse.json(
        { error: "Google API key not configured" },
        { status: 500 }
      )
    }

    // Verificar se Ã© uma mensagem de laudo ou pergunta sobre benefÃ­cio
    const messageLower = message.toLowerCase()

    // Detect explicit request to GENERATE a report (multi-step flow)
    const isGenerateReportIntent =
      messageLower.includes("gerar relatÃ³rio") ||
      messageLower.includes("gere um relatÃ³rio") ||
      messageLower.includes("gerar um relatÃ³rio") ||
      messageLower.includes("gere relatÃ³rio") ||
      messageLower.includes("gerar laudo") ||
      messageLower.includes("gere um laudo")

    const isReportRequest =
      messageLower.includes("laudo") ||
      messageLower.includes("diagnÃ³stico") ||
      messageLower.includes("cid") ||
      messageLower.includes("tea")

    // If the previous assistant message asked for a subject/benefit for the report,
    // treat the current message as the report target and generate the report.
    const lastAssistantLower = typeof lastAssistant === 'string' ? lastAssistant.toLowerCase() : ''
    const assistantAskedReportTarget = lastAssistantLower.includes('sobre qual assunto') || lastAssistantLower.includes('sobre qual benefÃ­cio') || lastAssistantLower.includes('sobre o que') || lastAssistantLower.includes('sobre qual assunto/benefÃ­cio')

      // Se a mensagem contÃ©m "preciso de ajuda" ou Ã© uma pergunta sobre uma etapa especÃ­fica,
      // nÃ£o deve criar um novo checklist
      const isHelpRequest = messageLower.includes("preciso de ajuda") || 
                           messageLower.includes("como posso proceder")

    if (isReportRequest && message.length > 200 && !isHelpRequest) {
      // Processar como laudo completo
      const orchestrator = new AmparaOrchestrator(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      const result = await orchestrator.processReport(message)

      return NextResponse.json({
        type: "full-report",
        data: result,
      })
    }

    // If user explicitly asked to generate a report (initial intent), ask for the target
    if (isGenerateReportIntent) {
      return NextResponse.json({
        type: 'ask-report-target',
        response: 'Entendi. Sobre qual assunto/benefÃ­cio vocÃª quer que eu gere o relatÃ³rio? (ex: conseguir um professor de apoio)'
      })
    }

    // If assistant previously asked for the report target, now the user answered â€” generate the report
    if (assistantAskedReportTarget) {
      // Determine benefit type from the user's answer
      const { benefitType, benefitName } = detectBenefitType(message)

      // Create agents
      const rightsAgent = new RightsSpecialistAgent(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      const officialWriter = new (await import('@/lib/agents/official-writer')).OfficialWriterAgent(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)

      // Fetch available benefits and pick the matching one
      const benefits = await rightsAgent.identifyApplicableBenefits({
        cid: null,
        age: null,
        supportLevel: null,
        schoolType: 'nao-informado',
        observations: '',
      })

      let mappedBenefitId: string = benefitType
      if (benefitType === 'apoio-educacional') mappedBenefitId = 'educacao-inclusiva'
      const benefit = benefits.find(b => b.id === mappedBenefitId) || benefits[0]

      try {
        const doc = await officialWriter.generateOfficialDocument(benefit, { cid: null, age: null, supportLevel: null, schoolType: 'nao-informado', observations: '' } as any, 'letter')

        return NextResponse.json({
          type: 'report-generated',
          response: doc.content,
          title: doc.title,
        })
      } catch (err) {
        console.error('Error generating report:', err)
        return NextResponse.json({ type: 'report-generated', response: 'Desculpe, nÃ£o foi possÃ­vel gerar o relatÃ³rio no momento.' })
      }
    }

    else {
      // Se for uma solicitaÃ§Ã£o de ajuda (nÃ£o criar novo checklist)
      const messageLower = message.toLowerCase()
      const isHelpRequest = messageLower.includes("preciso de ajuda")
      
      if (isHelpRequest) {
        // Gerar resposta de ajuda com IA sem criar checklist
        try {
          const model = new ChatGoogleGenerativeAI({
            model: "gemini-2.0-flash-lite",
            temperature: 0.7,
            apiKey: process.env.NEXT_PUBLIC_GOOGLE_API_KEY,
          })
          
          const prompt = `VocÃª Ã© o AMPARA, um assistente especializado em ajudar mÃ£es de crianÃ§as autistas no Brasil a acessar benefÃ­cios.

A usuÃ¡ria precisa de ajuda com uma etapa especÃ­fica: "${message}"

ForneÃ§a orientaÃ§Ãµes prÃ¡ticas, especÃ­ficas e empÃ¡ticas (mÃ¡ximo 200 palavras) sobre:
1. O que fazer nesta etapa especÃ­fica
2. Documentos ou requisitos necessÃ¡rios
3. Dicas e onde buscar mais informaÃ§Ãµes
4. Seja encorajadora e detalhada

Responda APENAS o texto da mensagem, sem formataÃ§Ã£o adicional.`

          const response = await model.invoke([{ role: "user", content: prompt }])
          
          return NextResponse.json({
            type: "help-response",
            response: response.content as string,
          })
        } catch (error) {
          console.error("Error generating help response:", error)
          return NextResponse.json({
            type: "help-response",
            response: "Desculpe, ocorreu um erro ao processar sua solicitaÃ§Ã£o. Tente novamente.",
          })
        }
      }
      
      // Processar como pergunta sobre benefÃ­cio especÃ­fico
      const { benefitType, benefitName } = detectBenefitType(message)
      
      // Se nÃ£o detectou benefÃ­cio especÃ­fico, gerar resposta com IA
      if (benefitType === "outros") {
        try {
          const model = new ChatGoogleGenerativeAI({
            model: "gemini-2.0-flash-lite",
            temperature: 0.7,
            apiKey: process.env.NEXT_PUBLIC_GOOGLE_API_KEY,
          })
          
          const prompt = `VocÃª Ã© o AMPARA, um assistente especializado em ajudar mÃ£es de crianÃ§as autistas no Brasil.

A usuÃ¡ria disse: "${message}"

Crie uma resposta acolhedora (mÃ¡ximo 150 palavras) que:
1. Se cumprimenta, seja calorosa
2. Se perguntar algo, responda de forma Ãºtil e empÃ¡tica
3. Se for mensagem genÃ©rica ("oi", "olÃ¡"), apresente o AMPARA e os benefÃ­cios disponÃ­veis
4. Use tom carinhoso, empÃ¡tico e encorajador
5. Use emojis discretos (ðŸ’™, ðŸ˜Š, ðŸ“‹)

BenefÃ­cios disponÃ­veis: BPC/LOAS, Passe Livre, IsenÃ§Ã£o de IPVA, Professor de Apoio, Medicamentos SUS, Terapias SUS, etc.

Responda APENAS o texto da mensagem, sem formataÃ§Ã£o adicional.`

          const response = await model.invoke([{ role: "user", content: prompt }])
          
          return NextResponse.json({
            type: "greeting",
            response: response.content as string,
          })
        } catch (error) {
          // Fallback em caso de erro
          return NextResponse.json({
            type: "greeting",
            response: "OlÃ¡! ðŸ˜Š Sou o AMPARA, assistente especializado em ajudar mÃ£es de crianÃ§as autistas a acessar benefÃ­cios e direitos no Brasil.\n\nPosso te ajudar com BPC/LOAS, Passe Livre, IsenÃ§Ã£o de IPVA, Professor de Apoio e muito mais!\n\nComo posso te ajudar hoje? ðŸ’™",
          })
        }
      }
      
      // Criar agentes para gerar checklist com IA
      const rightsAgent = new RightsSpecialistAgent(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      const guideAgent = new GuideAgent(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      
      // Buscar o benefÃ­cio completo
      const benefits = await rightsAgent.identifyApplicableBenefits({
        cid: null,
        age: null,
        supportLevel: null,
        schoolType: "nao-informado",
        observations: "",
      })
      
      // Mapear tipo detectado para o ID correto do benefÃ­cio
      let mappedBenefitId: string = benefitType
      if (benefitType === "apoio-educacional") {
        mappedBenefitId = "educacao-inclusiva"
      }
      
      const benefit = benefits.find(b => b.id === mappedBenefitId) || benefits.find(b => b.id === benefitType) || benefits[0]
      
      // Gerar checklist com IA
      const checklist = await guideAgent.generateDetailedChecklist(benefit)

      return NextResponse.json({
        type: "benefit-question",
        response: `OlÃ¡! Vou te ajudar com o ${benefitName}. Criei um checklist completo e detalhado com ${checklist.length} etapas para vocÃª acompanhar todo o processo passo a passo. VocÃª consegue! ðŸ’™`,
        checklist: {
          items: checklist,
        },
        benefitType,
        benefitName,
      })
    }
  } catch (error) {
    console.error("Error in chat API:", error)
    return NextResponse.json(
      { error: "Failed to process message", details: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    )
  }
}

function detectBenefitType(message: string): {
  benefitType: "bpc" | "passe-livre" | "isencao-ipva" | "apoio-educacional" | "outros"
  benefitName: string
} {
  const lower = message.toLowerCase()

  if (lower.includes("bpc") || lower.includes("loas")) {
    return { benefitType: "bpc", benefitName: "BPC/LOAS" }
  } else if (lower.includes("passe") || lower.includes("transporte") || lower.includes("busÃ£o")) {
    return { benefitType: "passe-livre", benefitName: "Passe Livre" }
  } else if (lower.includes("ipva") || lower.includes("isenÃ§Ã£o") || lower.includes("isencao")) {
    return { benefitType: "isencao-ipva", benefitName: "IsenÃ§Ã£o de IPVA" }
  } else if (
    lower.includes("professor") || 
    lower.includes("particular") || 
    lower.includes("educaÃ§Ã£o especial") ||
    lower.includes("educacao especial") ||
    lower.includes("atendimento educacional") ||
    lower.includes("apoio educacional")
  ) {
    return { benefitType: "apoio-educacional", benefitName: "Professor de Apoio (AEE)" }
  }

  return { benefitType: "outros", benefitName: "BenefÃ­cio" }
}

