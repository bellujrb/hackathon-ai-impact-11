import { NextRequest, NextResponse } from "next/server"
import { AmparaOrchestrator } from "@/lib/ampara-orchestrator"
import { GuideAgent } from "@/lib/agents/guide-agent"
import { RightsSpecialistAgent } from "@/lib/agents/rights-specialist"
import { ChatGoogleGenerativeAI } from "@langchain/google-genai"

export const maxDuration = 60

export async function POST(req: NextRequest) {
  try {
    const { message } = await req.json()

    if (!message || typeof message !== "string") {
      return NextResponse.json({ error: "Message is required" }, { status: 400 })
    }

    if (!process.env.NEXT_PUBLIC_GOOGLE_API_KEY) {
      return NextResponse.json(
        { error: "Google API key not configured" },
        { status: 500 }
      )
    }

    // Verificar se √© uma mensagem de laudo ou pergunta sobre benef√≠cio
          const messageLower = message.toLowerCase()
      const isReportRequest =
        messageLower.includes("laudo") ||
        messageLower.includes("diagn√≥stico") ||
        messageLower.includes("cid") ||
        messageLower.includes("tea")

      // Se a mensagem cont√©m "preciso de ajuda" ou √© uma pergunta sobre uma etapa espec√≠fica,
      // n√£o deve criar um novo checklist
      const isHelpRequest = messageLower.includes("preciso de ajuda") || 
                           messageLower.includes("como posso proceder")

      if (isReportRequest && message.length > 200 && !isHelpRequest) {
      // Processar como laudo completo
      const orchestrator = new AmparaOrchestrator(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      const result = await orchestrator.processReport(message)
      
      return NextResponse.json({
        type: "full-report",
        data: result,
      })
    } else {
      // Se for uma solicita√ß√£o de ajuda (n√£o criar novo checklist)
      const messageLower = message.toLowerCase()
      const isHelpRequest = messageLower.includes("preciso de ajuda")
      
      if (isHelpRequest) {
        // Gerar resposta de ajuda com IA sem criar checklist
        try {
          const model = new ChatGoogleGenerativeAI({
            model: "gemini-2.0-flash-lite",
            temperature: 0.7,
            apiKey: process.env.NEXT_PUBLIC_GOOGLE_API_KEY,
          })
          
          const prompt = `Voc√™ √© o AMPARA, um assistente especializado em ajudar m√£es de crian√ßas autistas no Brasil a acessar benef√≠cios.

A usu√°ria precisa de ajuda com uma etapa espec√≠fica: "${message}"

Forne√ßa orienta√ß√µes pr√°ticas, espec√≠ficas e emp√°ticas (m√°ximo 200 palavras) sobre:
1. O que fazer nesta etapa espec√≠fica
2. Documentos ou requisitos necess√°rios
3. Dicas e onde buscar mais informa√ß√µes
4. Seja encorajadora e detalhada

Responda APENAS o texto da mensagem, sem formata√ß√£o adicional.`

          const response = await model.invoke([{ role: "user", content: prompt }])
          
          return NextResponse.json({
            type: "help-response",
            response: response.content as string,
          })
        } catch (error) {
          console.error("Error generating help response:", error)
          return NextResponse.json({
            type: "help-response",
            response: "Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente.",
          })
        }
      }
      
      // Processar como pergunta sobre benef√≠cio espec√≠fico
      const { benefitType, benefitName } = detectBenefitType(message)
      
      // Se n√£o detectou benef√≠cio espec√≠fico, gerar resposta com IA
      if (benefitType === "outros") {
        try {
          const model = new ChatGoogleGenerativeAI({
            model: "gemini-2.0-flash-lite",
            temperature: 0.7,
            apiKey: process.env.NEXT_PUBLIC_GOOGLE_API_KEY,
          })
          
          const prompt = `Voc√™ √© o AMPARA, um assistente especializado em ajudar m√£es de crian√ßas autistas no Brasil.

A usu√°ria disse: "${message}"

Crie uma resposta acolhedora (m√°ximo 150 palavras) que:
1. Se cumprimenta, seja calorosa
2. Se perguntar algo, responda de forma √∫til e emp√°tica
3. Se for mensagem gen√©rica ("oi", "ol√°"), apresente o AMPARA e os benef√≠cios dispon√≠veis
4. Use tom carinhoso, emp√°tico e encorajador
5. Use emojis discretos (üíô, üòä, üìã)

Benef√≠cios dispon√≠veis: BPC/LOAS, Passe Livre, Isen√ß√£o de IPVA, Professor de Apoio, Medicamentos SUS, Terapias SUS, etc.

Responda APENAS o texto da mensagem, sem formata√ß√£o adicional.`

          const response = await model.invoke([{ role: "user", content: prompt }])
          
          return NextResponse.json({
            type: "greeting",
            response: response.content as string,
          })
        } catch (error) {
          // Fallback em caso de erro
          return NextResponse.json({
            type: "greeting",
            response: "Ol√°! üòä Sou o AMPARA, assistente especializado em ajudar m√£es de crian√ßas autistas a acessar benef√≠cios e direitos no Brasil.\n\nPosso te ajudar com BPC/LOAS, Passe Livre, Isen√ß√£o de IPVA, Professor de Apoio e muito mais!\n\nComo posso te ajudar hoje? üíô",
          })
        }
      }
      
      // Criar agentes para gerar checklist com IA
      const rightsAgent = new RightsSpecialistAgent(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      const guideAgent = new GuideAgent(process.env.NEXT_PUBLIC_GOOGLE_API_KEY)
      
      // Buscar o benef√≠cio completo
      const benefits = await rightsAgent.identifyApplicableBenefits({
        cid: null,
        age: null,
        supportLevel: null,
        schoolType: "nao-informado",
        observations: "",
      })
      
      // Mapear tipo detectado para o ID correto do benef√≠cio
      let mappedBenefitId: string = benefitType
      if (benefitType === "apoio-educacional") {
        mappedBenefitId = "educacao-inclusiva"
      }
      
      const benefit = benefits.find(b => b.id === mappedBenefitId) || benefits.find(b => b.id === benefitType) || benefits[0]
      
      // Gerar checklist com IA
      const checklist = await guideAgent.generateDetailedChecklist(benefit)

      return NextResponse.json({
        type: "benefit-question",
        response: `Ol√°! Vou te ajudar com o ${benefitName}. Criei um checklist completo e detalhado com ${checklist.length} etapas para voc√™ acompanhar todo o processo passo a passo. Voc√™ consegue! üíô`,
        checklist: {
          items: checklist,
        },
        benefitType,
        benefitName,
      })
    }
  } catch (error) {
    console.error("Error in chat API:", error)
    return NextResponse.json(
      { error: "Failed to process message", details: error instanceof Error ? error.message : "Unknown error" },
      { status: 500 }
    )
  }
}

function detectBenefitType(message: string): {
  benefitType: "bpc" | "passe-livre" | "isencao-ipva" | "apoio-educacional" | "outros"
  benefitName: string
} {
  const lower = message.toLowerCase()

  if (lower.includes("bpc") || lower.includes("loas")) {
    return { benefitType: "bpc", benefitName: "BPC/LOAS" }
  } else if (lower.includes("passe") || lower.includes("transporte") || lower.includes("bus√£o")) {
    return { benefitType: "passe-livre", benefitName: "Passe Livre" }
  } else if (lower.includes("ipva") || lower.includes("isen√ß√£o") || lower.includes("isencao")) {
    return { benefitType: "isencao-ipva", benefitName: "Isen√ß√£o de IPVA" }
  } else if (
    lower.includes("professor") || 
    lower.includes("particular") || 
    lower.includes("educa√ß√£o especial") ||
    lower.includes("educacao especial") ||
    lower.includes("atendimento educacional") ||
    lower.includes("apoio educacional")
  ) {
    return { benefitType: "apoio-educacional", benefitName: "Professor de Apoio (AEE)" }
  }

  return { benefitType: "outros", benefitName: "Benef√≠cio" }
}

